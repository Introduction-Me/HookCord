import asyncio
import logging
from nio import AsyncClient, MatrixRoom, RoomMessageText
import os
from dotenv import load_dotenv
import json
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class HardcoreMatrixBot:
    def __init__(self):
        self.homeserver = os.getenv("MATRIX_HOMESERVER", "https://matrix.org")
        self.user_id = os.getenv("MATRIX_USER_ID")
        self.password = os.getenv("MATRIX_PASSWORD")
        self.device_id = "HARDCORE_BOT"
        
        self.client = AsyncClient(self.homeserver, self.user_id)
        self.client.device_id = self.device_id
        
        # –ñ–µ—Å—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.commands = {
            "!help": self.cmd_help,
            "!ping": self.cmd_ping,
            "!time": self.cmd_time,
            "!calc": self.cmd_calc,
            "!ban": self.cmd_ban,
            "!kick": self.cmd_kick,
            "!stats": self.cmd_stats,
            "!spam": self.cmd_spam,
            "!flood": self.cmd_flood,
        }
        
        self.user_stats = {}
        self.admin_users = ["@your_admin:matrix.org"]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–æ–≤

    async def cmd_help(self, room: MatrixRoom, event: RoomMessageText):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
        help_text = """
üî• **HARDCORE BOT COMMANDS:** üî•

**–û—Å–Ω–æ–≤–Ω—ã–µ:**
`!ping` - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
`!time` - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
`!calc 2+2` - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

**–ê–¥–º–∏–Ω—Å–∫–∏–µ:**
`!kick @user` - –ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`!ban @user` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`!stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
`!spam @user 5` - –°–ø–∞–º–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`!flood 10` - –§–ª—É–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

**–ñ–µ—Å—Ç–∫–∏–µ:**
`!destroy` - –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É (—à—É—Ç–∫–∞)
`!hack` - –í–∑–ª–æ–º –º–∞—Ç—Ä–∏—Ü—ã (—à—É—Ç–∫–∞)
"""
        await self.client.room_send(
            room_id=room.room_id,
            message_type="m.room.message",
            content={"msgtype": "m.text", "body": help_text}
        )

    async def cmd_ping(self, room: MatrixRoom, event: RoomMessageText):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        await self.client.room_send(
            room_id=room.room_id,
            message_type="m.room.message",
            content={"msgtype": "m.text", "body": "üèì PONG! –ë–æ—Ç –∂–∏–≤ –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è–º!"}
        )

    async def cmd_time(self, room: MatrixRoom, event: RoomMessageText):
        """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await self.client.room_send(
            room_id=room.room_id,
            message_type="m.room.message",
            content={"msgtype": "m.text", "body": f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}"}
        )

    async def cmd_calc(self, room: MatrixRoom, event: RoomMessageText):
        """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        try:
            expr = event.body.split(" ", 1)[1]
            result = eval(expr)
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}"}
            )
        except:
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": "‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏!"}
            )

    async def cmd_ban(self, room: MatrixRoom, event: RoomMessageText):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        if event.sender not in self.admin_users:
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": "‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!"}
            )
            return
            
        target = event.body.split(" ")[1] if len(event.body.split(" ")) > 1 else None
        if target:
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": f"üî® –ë–ê–ù –•–ê–ú–ú–ï–†–û–ú! {target} –£–ù–ò–ß–¢–û–ñ–ï–ù!"}
            )

    async def cmd_kick(self, room: MatrixRoom, event: RoomMessageText):
        """–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        if event.sender not in self.admin_users:
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": "‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!"}
            )
            return
            
        target = event.body.split(" ")[1] if len(event.body.split(" ")) > 1 else None
        if target:
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": f"üë¢ –ö–ò–ö! {target} –≤—ã–ª–µ—Ç–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!"}
            )

    async def cmd_stats(self, room: MatrixRoom, event: RoomMessageText):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = event.sender
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {"messages": 0, "commands": 0}
        
        self.user_stats[user_id]["commands"] += 1
        
        stats_text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:**\n"
        for user, data in self.user_stats.items():
            stats_text += f"{user}: {data['messages']} —Å–æ–æ–±—â., {data['commands']} –∫–æ–º–∞–Ω–¥\n"
        
        await self.client.room_send(
            room_id=room.room_id,
            message_type="m.room.message",
            content={"msgtype": "m.text", "body": stats_text}
        )

    async def cmd_spam(self, room: MatrixRoom, event: RoomMessageText):
        """–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if event.sender not in self.admin_users:
            return
            
        try:
            parts = event.body.split(" ")
            target = parts[1]
            count = int(parts[2]) if len(parts) > 2 else 3
            count = min(count, 10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        except:
            return
        
        for i in range(count):
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": f"üîî {target}, —ç—Ç–æ —Å–ø–∞–º #{i+1}!"}
            )
            await asyncio.sleep(1)

    async def cmd_flood(self, room: MatrixRoom, event: RoomMessageText):
        """–§–ª—É–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if event.sender not in self.admin_users:
            return
            
        try:
            count = int(event.body.split(" ")[1])
            count = min(count, 20)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        except:
            count = 5
        
        for i in range(count):
            await self.client.room_send(
                room_id=room.room_id,
                message_type="m.room.message",
                content={"msgtype": "m.text", "body": f"üåä –§–õ–£–î #{i+1}! –ó–ê–¢–û–ü–ò–ú –í–°–ï–•!"}
            )
            await asyncio.sleep(0.5)

    async def on_message(self, room: MatrixRoom, event: RoomMessageText):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.sender == self.user_id:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if event.sender not in self.user_stats:
            self.user_stats[event.sender] = {"messages": 0, "commands": 0}
        self.user_stats[event.sender]["messages"] += 1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        for cmd, handler in self.commands.items():
            if event.body.startswith(cmd):
                await handler(room, event)
                break

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –õ–æ–≥–∏–Ω–∏–º—Å—è
            await self.client.login(self.password)
            logger.info(f"–ë–æ—Ç {self.user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è!")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏ —Å–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.client.sync_forever(timeout=30000, full_state=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
        finally:
            await self.client.close()

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async def main():
    bot = HardcoreMatrixBot()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.client.add_event_callback(bot.on_message, RoomMessageText)
    
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())